<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>KAI's Blog</title><link>https://makai-dog.github.io</link><description>PPRT's tec</description><copyright>KAI's Blog</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/174258020?v=4</url><title>avatar</title><link>https://makai-dog.github.io</link></image><lastBuildDate>Mon, 20 Jan 2025 14:57:58 +0000</lastBuildDate><managingEditor>KAI's Blog</managingEditor><ttl>60</ttl><webMaster>KAI's Blog</webMaster><item><title>无人系统组学习路线</title><link>https://makai-dog.github.io/post/wu-ren-xi-tong-zu-xue-xi-lu-xian.html</link><description># 无人车队--无人系统组学习路线

---

## 基础部分

### 一. 编程语言基础

我们首先要学习的是编程语言，这部分在你们大二时也会学，所以晚学不如早学

1. C++   万年不变，还是继续推荐[黑马程序员cpp](https://www.bilibili.com/video/BV1et411b73Z?t=24.8)
2. python 暂不做硬性要求，附[黑马程序员python](https://www.bilibili.com/video/BV1qW4y1a7fU?t=9.4)

### 二. markdown和github的使用

**学习markdown和GitHub的使用，可以让车队更好的管理我们的技术文档和工作日志，以做好传承和记录技术为目的，兼具对于GitHub等平台更深化的使用**
对于markdown语法，csdn上有很多归纳教程[markdown语法](https://blog.csdn.net/qq_43108153/article/details/136230423?spm=1001.2014.3001.5506)
GitHub的使用教程可以看我录的简介视频

---

## 进阶部分

### 三. ROS的学习

这一部分其实有很多教程，目前我们车队使用的是[autolabor](https://www.bilibili.com/video/BV1Ci4y1L7ZZ?t=2.8&amp;p=19)
从017开始看即可，hello world的实现，至少先看到061
另外还有其他的教程，这里推荐：[机器人工匠阿杰](https://www.bilibili.com/video/BV1MW4y1B7CF?t=2.5)
autolabor教程的讲解者就是赵虚左，他自己的账号有第8，9章的内容：[赵虚左](https://www.bilibili.com/video/BV1Ub4y1a7PH?t=0.9)

---

## 赛规部分

### 关于赛规，我的想法是学完上述三部分内容之后，再来看赛规

其次，赛规很基本的一点是要把各个英文缩写名词背下来，其余一些重要赛规内容和2025赛季新更改的规则也需要背下来（是的，我认为应该背下来）

---

## 与电驱动接线的知识连接部分

### 四. matlab/simulink软件的学习

matlab我是看一本书学的，大家有没有什么好的视频教程可以在这放上链接

而关于控制系统的学习，DR_CAN的视频是非常经典的，但看下来感觉与车队的任务联系不够大，所以可以大家课余自行学习

### 五. multisim的学习
。</description><guid isPermaLink="true">https://makai-dog.github.io/post/wu-ren-xi-tong-zu-xue-xi-lu-xian.html</guid><pubDate>Mon, 20 Jan 2025 14:57:37 +0000</pubDate></item><item><title>GIT的使用</title><link>https://makai-dog.github.io/post/GIT-de-shi-yong.html</link><description># 将本地文件夹push到远端GitHub仓库

```bash
git init
```

```bash
git branch -M main
```

```bash
git add .
```

```bash
git commit -m 'first commit'
```

```bash
git remote add origin https:...（http这改为要上传的远端仓库的路径）
```

```bash
git push -u origin main
```
。</description><guid isPermaLink="true">https://makai-dog.github.io/post/GIT-de-shi-yong.html</guid><pubDate>Sat, 18 Jan 2025 17:11:55 +0000</pubDate></item><item><title>yolov8的使用</title><link>https://makai-dog.github.io/post/yolov8-de-shi-yong.html</link><description># 关于yolov8的使用

&gt;本篇markdown文件主要讲解yolov8的使用，源代码请从GitHub上自行clone，环境配置请查看GitHub上的yolov8（ultralytics）对环境配置的要求，或者说，其实主要需要下载Anaconda，CUDA，CUDNN，pytorch等

## 1.VScode软件安装

[vscode下载](https://blog.csdn.net/weixin_43121885/article/details/131779104?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=131779104&amp;sharerefer=PC&amp;sharesource=2302_80370776&amp;sharefrom=from_link)
可以查阅这篇csdn文档，先下载Windows版本

## 2.Python环境配置

直接登录Python官网下载即可，这个也记得要是Windows的
[Python官方链接](https://www.python.org/)

## 3.Anaconda,CUDA,CUDNN,pytorch的安装

其实更希望大家自行查阅相关软件和环境的配置安装方法，但貌似也没什么必要，所以继续附上链接：
[Anaconda,CUDA,CUDNN,pytorch讲解和安装文档](https://blog.csdn.net/Little_Carter/article/details/135934842?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=135934842&amp;sharerefer=PC&amp;sharesource=2302_80370776&amp;sharefrom=from_link)

到此，使用yolo目标检测的前期配置基本完成（如有遗漏还请指正），另外，上述需要安装的内容有很多教程，大家也可以找自己看着顺眼的（推荐）

&gt;接下来正式来到yolov8的使用环节，yolov8代码包的下载最好去GitHub找，
 或者我压缩给大家

## 1.yolov8文件包的解读

整个文件包名为ultralytics

其中，我们需要在ultralytics根目录新建一个datasets文件夹
在其中新建images和labels两个文件夹

images文件夹下再新建train，val，test文件夹，三个文件夹下放相同的png图片文件（利用jpg2png.py来实现jpg到png的转换）
labels文件夹下再新建train，val文件夹，两个文件夹下放相同的txt文件

## 2.关于视频抽帧和标注数据集

视频抽帧，我推荐使用我的frame.py程序来实现

标注数据集，我推荐使用网页端的makesense.ai来实现 （因为我不知道为啥用不了labelimg，然后这个makesense也没找到app），标注数据集的要求后续再讲

## 3.编写yaml配置文件和下载.pt模型

训练数据集之前需要在datasets目录下写一个.yaml文件，内容格式见color.yaml

另外还要先去官网上下载随便一个.pt模型，选哪个模型取决于你的数据集大小、你想要的训练速度和电脑配置
.pt模型也要放在datasets目录下

## 4.训练时的命令行指令

我使用的Anaconda prompt命令行，
调到d盘和yolo虚拟环境是必须的第一步
然后：
**训练**

```bash
yolo task=detect mode=train model=yolov8n.pt data=data/fall.yaml batch=16 epochs=50 close_mosaic=0 imgsz=640 workers=8 device=0
```

训练后验证
**验证**

```bash
yolo task=detect mode=val model=runs/detect/train3/weights/best.pt data=data/fall.yaml device=0 plots=True
```

验证后进行图片或视频的预测
**预测**

```bash
yolo task=detect mode=predict model=runs/detect/train3/weights/best.pt source=images/videos device=0
```

最终导出模型
**导出**

```bash
yolo task=detect mode=export model=runs/detect/train3/weights/best.pt format=onnx/ncnn
```

下面是yolo整体命令的格式
**整体**

```bash
yolo task=detect    mode=train    model=yolov8n.pt        args...
          classify       predict        yolov8n-cls.yaml  args...
          segment        val            yolov8n-seg.yaml  args...
                         export         yolov8n.pt        format=onnx  args...
```

连接电脑摄像头进行实时预测用下面这条指令：
**电脑摄像头**

```bash
yolo predict model=D:/ultralytics/yolov8s.pt source=0 show
```

其中，涉及路径的都建议要写全路径
如果想预测后保存预测结果，那么在预测的命令后添加一段命令：save_txt

![1729929656583](image/explain/1729929656583.png)
![1729929740330](image/explain/1729929740330.png)
![1729929838667](image/explain/1729929838667.png)
。</description><guid isPermaLink="true">https://makai-dog.github.io/post/yolov8-de-shi-yong.html</guid><pubDate>Sat, 18 Jan 2025 17:10:43 +0000</pubDate></item></channel></rss>